Acquiring state lock. This may take a few moments...

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # google_compute_global_address.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_global_address" "default" {
      [32m+[0m[0m address            = (known after apply)
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m effective_labels   = {
          [32m+[0m[0m "goog-terraform-provisioned" = "true"
        }
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m label_fingerprint  = (known after apply)
      [32m+[0m[0m name               = "external-ip"
      [32m+[0m[0m prefix_length      = (known after apply)
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m terraform_labels   = {
          [32m+[0m[0m "goog-terraform-provisioned" = "true"
        }
    }

[1m  # google_compute_network.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_network" "default" {
      [32m+[0m[0m auto_create_subnetworks                   = true
      [32m+[0m[0m delete_default_routes_on_create           = false
      [32m+[0m[0m gateway_ipv4                              = (known after apply)
      [32m+[0m[0m id                                        = (known after apply)
      [32m+[0m[0m internal_ipv6_range                       = (known after apply)
      [32m+[0m[0m mtu                                       = (known after apply)
      [32m+[0m[0m name                                      = "interstellar-network"
      [32m+[0m[0m network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      [32m+[0m[0m numeric_id                                = (known after apply)
      [32m+[0m[0m project                                   = "mando-host-project"
      [32m+[0m[0m routing_mode                              = (known after apply)
      [32m+[0m[0m self_link                                 = (known after apply)
    }

[1m  # google_compute_router.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router" "default" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-cloud-router"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m region             = "us-central1"
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # google_compute_router.default_eu[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router" "default_eu" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-cloud-router-eu"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m region             = "europe-west2"
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # google_compute_router_nat.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router_nat" "default" {
      [32m+[0m[0m auto_network_tier                   = (known after apply)
      [32m+[0m[0m drain_nat_ips                       = (known after apply)
      [32m+[0m[0m enable_dynamic_port_allocation      = (known after apply)
      [32m+[0m[0m enable_endpoint_independent_mapping = (known after apply)
      [32m+[0m[0m endpoint_types                      = (known after apply)
      [32m+[0m[0m icmp_idle_timeout_sec               = 30
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m min_ports_per_vm                    = (known after apply)
      [32m+[0m[0m name                                = "interstellar-nat-gateway"
      [32m+[0m[0m nat_ip_allocate_option              = "AUTO_ONLY"
      [32m+[0m[0m nat_ips                             = (known after apply)
      [32m+[0m[0m project                             = "mando-host-project"
      [32m+[0m[0m region                              = "us-central1"
      [32m+[0m[0m router                              = "interstellar-cloud-router"
      [32m+[0m[0m source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      [32m+[0m[0m tcp_established_idle_timeout_sec    = 1200
      [32m+[0m[0m tcp_time_wait_timeout_sec           = 120
      [32m+[0m[0m tcp_transitory_idle_timeout_sec     = 30
      [32m+[0m[0m udp_idle_timeout_sec                = 30
    }

[1m  # google_compute_router_nat.default_eu[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router_nat" "default_eu" {
      [32m+[0m[0m auto_network_tier                   = (known after apply)
      [32m+[0m[0m drain_nat_ips                       = (known after apply)
      [32m+[0m[0m enable_dynamic_port_allocation      = (known after apply)
      [32m+[0m[0m enable_endpoint_independent_mapping = (known after apply)
      [32m+[0m[0m endpoint_types                      = (known after apply)
      [32m+[0m[0m icmp_idle_timeout_sec               = 30
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m min_ports_per_vm                    = (known after apply)
      [32m+[0m[0m name                                = "interstellar-nat-gateway-eu"
      [32m+[0m[0m nat_ip_allocate_option              = "AUTO_ONLY"
      [32m+[0m[0m nat_ips                             = (known after apply)
      [32m+[0m[0m project                             = "mando-host-project"
      [32m+[0m[0m region                              = "europe-west2"
      [32m+[0m[0m router                              = "interstellar-cloud-router-eu"
      [32m+[0m[0m source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      [32m+[0m[0m tcp_established_idle_timeout_sec    = 1200
      [32m+[0m[0m tcp_time_wait_timeout_sec           = 120
      [32m+[0m[0m tcp_transitory_idle_timeout_sec     = 30
      [32m+[0m[0m udp_idle_timeout_sec                = 30
    }

[1m  # google_dns_record_set.a_record[0m will be created
[0m  [32m+[0m[0m resource "google_dns_record_set" "a_record" {
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m managed_zone = "google-cloud-pocs-dev"
      [32m+[0m[0m name         = "interstellar.google-cloud-pocs.dev."
      [32m+[0m[0m project      = "mando-host-project"
      [32m+[0m[0m rrdatas      = (known after apply)
      [32m+[0m[0m ttl          = 300
      [32m+[0m[0m type         = "A"
    }

[1m  # module.firewall.google_compute_firewall.allow_egress[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "allow_egress" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m description        = "Creates firewall rule targeting tagged instances to allow egress traffic"
      [32m+[0m[0m destination_ranges = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m direction          = "EGRESS"
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "allow-egress"
      [32m+[0m[0m network            = "interstellar-network"
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "interstellar-http-server",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "0-65535",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "0-65535",
            ]
          [32m+[0m[0m protocol = "udp"
        }
      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = []
          [32m+[0m[0m protocol = "icmp"
        }
    }

[1m  # module.firewall.google_compute_firewall.http_server[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "http_server" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = (known after apply)
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-firewall-http"
      [32m+[0m[0m network            = "interstellar-network"
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_ranges      = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "interstellar-http-server",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "80",
              [32m+[0m[0m "443",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # module.firewall.google_compute_firewall.internal[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "internal" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = (known after apply)
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-firewall-internal"
      [32m+[0m[0m network            = "interstellar-network"
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_tags        = [
          [32m+[0m[0m "interstellar-http-server",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "0-65535",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "0-65535",
            ]
          [32m+[0m[0m protocol = "udp"
        }
      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = []
          [32m+[0m[0m protocol = "icmp"
        }
    }

[1m  # module.firewall.google_compute_firewall.ssh[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "ssh" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = (known after apply)
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-firewall-ssh"
      [32m+[0m[0m network            = "interstellar-network"
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_ranges      = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "interstellar-http-server",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "22",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # module.instance_template.google_compute_instance_template.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_instance_template" "default" {
      [32m+[0m[0m can_ip_forward          = false
      [32m+[0m[0m creation_timestamp      = (known after apply)
      [32m+[0m[0m effective_labels        = {
          [32m+[0m[0m "goog-terraform-provisioned" = "true"
        }
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m machine_type            = "e2-medium"
      [32m+[0m[0m metadata_fingerprint    = (known after apply)
      [32m+[0m[0m metadata_startup_script = <<-EOT
            #!/bin/bash
            sudo apt-get update
            sudo apt-get install -y apache2
            sudo service apache2 restart
            sudo mkdir -p /var/www/html
            sudo gsutil -m cp -r gs://millers-planet/* /var/www/html/
        EOT
      [32m+[0m[0m name                    = (known after apply)
      [32m+[0m[0m name_prefix             = "interstellar-"
      [32m+[0m[0m project                 = "mando-host-project"
      [32m+[0m[0m region                  = (known after apply)
      [32m+[0m[0m self_link               = (known after apply)
      [32m+[0m[0m self_link_unique        = (known after apply)
      [32m+[0m[0m tags                    = [
          [32m+[0m[0m "interstellar-http-server",
        ]
      [32m+[0m[0m tags_fingerprint        = (known after apply)
      [32m+[0m[0m terraform_labels        = {
          [32m+[0m[0m "goog-terraform-provisioned" = "true"
        }

      [32m+[0m[0m disk {
          [32m+[0m[0m auto_delete            = true
          [32m+[0m[0m boot                   = true
          [32m+[0m[0m device_name            = (known after apply)
          [32m+[0m[0m disk_size_gb           = (known after apply)
          [32m+[0m[0m disk_type              = (known after apply)
          [32m+[0m[0m interface              = (known after apply)
          [32m+[0m[0m mode                   = (known after apply)
          [32m+[0m[0m provisioned_iops       = (known after apply)
          [32m+[0m[0m provisioned_throughput = (known after apply)
          [32m+[0m[0m source_image           = "debian-cloud/debian-11"
          [32m+[0m[0m type                   = (known after apply)
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m internal_ipv6_prefix_length = (known after apply)
          [32m+[0m[0m ipv6_access_type            = (known after apply)
          [32m+[0m[0m ipv6_address                = (known after apply)
          [32m+[0m[0m name                        = (known after apply)
          [32m+[0m[0m network                     = (known after apply)
          [32m+[0m[0m stack_type                  = (known after apply)
          [32m+[0m[0m subnetwork                  = (known after apply)
          [32m+[0m[0m subnetwork_project          = (known after apply)
        }

      [32m+[0m[0m scheduling {
          [32m+[0m[0m automatic_restart   = true
          [32m+[0m[0m on_host_maintenance = "MIGRATE"
          [32m+[0m[0m preemptible         = false
          [32m+[0m[0m provisioning_model  = (known after apply)
        }

      [32m+[0m[0m service_account {
          [32m+[0m[0m email  = (known after apply)
          [32m+[0m[0m scopes = [
              [32m+[0m[0m "https://www.googleapis.com/auth/cloud-platform",
            ]
        }
    }

[1m  # module.load_balancer.google_compute_backend_service.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_backend_service" "default" {
      [32m+[0m[0m connection_draining_timeout_sec = 300
      [32m+[0m[0m creation_timestamp              = (known after apply)
      [32m+[0m[0m fingerprint                     = (known after apply)
      [32m+[0m[0m generated_id                    = (known after apply)
      [32m+[0m[0m health_checks                   = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m load_balancing_scheme           = "EXTERNAL"
      [32m+[0m[0m name                            = "interstellar-backend-service"
      [32m+[0m[0m port_name                       = (known after apply)
      [32m+[0m[0m project                         = "mando-host-project"
      [32m+[0m[0m protocol                        = "HTTP"
      [32m+[0m[0m self_link                       = (known after apply)
      [32m+[0m[0m session_affinity                = "NONE"
      [32m+[0m[0m timeout_sec                     = (known after apply)

      [32m+[0m[0m backend {
          [32m+[0m[0m balancing_mode               = "UTILIZATION"
          [32m+[0m[0m capacity_scaler              = 1
          [32m+[0m[0m group                        = (known after apply)
          [32m+[0m[0m max_connections              = (known after apply)
          [32m+[0m[0m max_connections_per_endpoint = (known after apply)
          [32m+[0m[0m max_connections_per_instance = (known after apply)
          [32m+[0m[0m max_rate                     = (known after apply)
          [32m+[0m[0m max_rate_per_endpoint        = (known after apply)
          [32m+[0m[0m max_rate_per_instance        = (known after apply)
          [32m+[0m[0m max_utilization              = 0.8
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m backend {
          [32m+[0m[0m balancing_mode               = "UTILIZATION"
          [32m+[0m[0m capacity_scaler              = 1
          [32m+[0m[0m group                        = (known after apply)
          [32m+[0m[0m max_connections              = (known after apply)
          [32m+[0m[0m max_connections_per_endpoint = (known after apply)
          [32m+[0m[0m max_connections_per_instance = (known after apply)
          [32m+[0m[0m max_rate                     = (known after apply)
          [32m+[0m[0m max_rate_per_endpoint        = (known after apply)
          [32m+[0m[0m max_rate_per_instance        = (known after apply)
          [32m+[0m[0m max_utilization              = 0.8
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
    }

[1m  # module.load_balancer.google_compute_global_forwarding_rule.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_global_forwarding_rule" "default" {
      [32m+[0m[0m base_forwarding_rule  = (known after apply)
      [32m+[0m[0m effective_labels      = (known after apply)
      [32m+[0m[0m forwarding_rule_id    = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address            = (known after apply)
      [32m+[0m[0m ip_protocol           = (known after apply)
      [32m+[0m[0m label_fingerprint     = (known after apply)
      [32m+[0m[0m load_balancing_scheme = "EXTERNAL"
      [32m+[0m[0m name                  = "interstellar-forwarding-rule"
      [32m+[0m[0m network               = (known after apply)
      [32m+[0m[0m network_tier          = (known after apply)
      [32m+[0m[0m port_range            = "443"
      [32m+[0m[0m project               = "mando-host-project"
      [32m+[0m[0m psc_connection_id     = (known after apply)
      [32m+[0m[0m psc_connection_status = (known after apply)
      [32m+[0m[0m self_link             = (known after apply)
      [32m+[0m[0m subnetwork            = (known after apply)
      [32m+[0m[0m target                = (known after apply)
      [32m+[0m[0m terraform_labels      = (known after apply)
    }

[1m  # module.load_balancer.google_compute_health_check.http[0m will be created
[0m  [32m+[0m[0m resource "google_compute_health_check" "http" {
      [32m+[0m[0m check_interval_sec  = 5
      [32m+[0m[0m creation_timestamp  = (known after apply)
      [32m+[0m[0m healthy_threshold   = 1
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "interstellar-http-healthcheck"
      [32m+[0m[0m project             = "mando-host-project"
      [32m+[0m[0m self_link           = (known after apply)
      [32m+[0m[0m timeout_sec         = 5
      [32m+[0m[0m type                = (known after apply)
      [32m+[0m[0m unhealthy_threshold = 5

      [32m+[0m[0m http_health_check {
          [32m+[0m[0m port         = 80
          [32m+[0m[0m proxy_header = "NONE"
          [32m+[0m[0m request_path = "/"
        }
    }

[1m  # module.load_balancer.google_compute_managed_ssl_certificate.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_managed_ssl_certificate" "default" {
      [32m+[0m[0m certificate_id            = (known after apply)
      [32m+[0m[0m creation_timestamp        = (known after apply)
      [32m+[0m[0m expire_time               = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m name                      = "interstellar-ssl-cert"
      [32m+[0m[0m project                   = "mando-host-project"
      [32m+[0m[0m self_link                 = (known after apply)
      [32m+[0m[0m subject_alternative_names = (known after apply)
      [32m+[0m[0m type                      = "MANAGED"

      [32m+[0m[0m managed {
          [32m+[0m[0m domains = [
              [32m+[0m[0m "interstellar.google-cloud-pocs.dev",
            ]
        }
    }

[1m  # module.load_balancer.google_compute_target_https_proxy.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_target_https_proxy" "default" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-https-proxy"
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m proxy_bind         = (known after apply)
      [32m+[0m[0m proxy_id           = (known after apply)
      [32m+[0m[0m quic_override      = "NONE"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m ssl_certificates   = (known after apply)
      [32m+[0m[0m tls_early_data     = (known after apply)
      [32m+[0m[0m url_map            = (known after apply)
    }

[1m  # module.load_balancer.google_compute_url_map.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_url_map" "default" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m default_service    = (known after apply)
      [32m+[0m[0m fingerprint        = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m map_id             = (known after apply)
      [32m+[0m[0m name               = "interstellar-url-map"
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # module.mig.data.google_compute_region_instance_group.default[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "google_compute_region_instance_group" "default" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m instances = (known after apply)
      [32m+[0m[0m name      = "interstellar-mig"
      [32m+[0m[0m project   = "mando-host-project"
      [32m+[0m[0m region    = "us-central1"
      [32m+[0m[0m self_link = (known after apply)
      [32m+[0m[0m size      = (known after apply)
    }

[1m  # module.mig.google_compute_region_autoscaler.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_region_autoscaler" "default" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-autoscaler"
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m region             = "us-central1"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m target             = (known after apply)

      [32m+[0m[0m autoscaling_policy {
          [32m+[0m[0m cooldown_period = 60
          [32m+[0m[0m max_replicas    = 5
          [32m+[0m[0m min_replicas    = 2
          [32m+[0m[0m mode            = "ON"

          [32m+[0m[0m cpu_utilization {
              [32m+[0m[0m predictive_method = "STANDARD_AUTOSCALING"
              [32m+[0m[0m target            = 0.8
            }
        }
    }

[1m  # module.mig.google_compute_region_instance_group_manager.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_region_instance_group_manager" "default" {
      [32m+[0m[0m base_instance_name               = "interstellar"
      [32m+[0m[0m creation_timestamp               = (known after apply)
      [32m+[0m[0m distribution_policy_target_shape = (known after apply)
      [32m+[0m[0m distribution_policy_zones        = (known after apply)
      [32m+[0m[0m fingerprint                      = (known after apply)
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m instance_group                   = (known after apply)
      [32m+[0m[0m instance_group_manager_id        = (known after apply)
      [32m+[0m[0m list_managed_instances_results   = "PAGELESS"
      [32m+[0m[0m name                             = "interstellar-mig"
      [32m+[0m[0m project                          = "mando-host-project"
      [32m+[0m[0m region                           = "us-central1"
      [32m+[0m[0m self_link                        = (known after apply)
      [32m+[0m[0m status                           = (known after apply)
      [32m+[0m[0m target_size                      = 2
      [32m+[0m[0m wait_for_instances               = false
      [32m+[0m[0m wait_for_instances_status        = "STABLE"

      [32m+[0m[0m auto_healing_policies {
          [32m+[0m[0m health_check      = (known after apply)
          [32m+[0m[0m initial_delay_sec = 60
        }

      [32m+[0m[0m named_port {
          [32m+[0m[0m name = "http"
          [32m+[0m[0m port = 80
        }

      [32m+[0m[0m update_policy {
          [32m+[0m[0m max_surge_fixed       = 3
          [32m+[0m[0m max_unavailable_fixed = 3
          [32m+[0m[0m minimal_action        = "REFRESH"
          [32m+[0m[0m type                  = "PROACTIVE"
        }

      [32m+[0m[0m version {
          [32m+[0m[0m instance_template = (known after apply)
        }
    }

[1m  # module.mig_eu.data.google_compute_region_instance_group.default[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "google_compute_region_instance_group" "default" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m instances = (known after apply)
      [32m+[0m[0m name      = "interstellar-mig-eu"
      [32m+[0m[0m project   = "mando-host-project"
      [32m+[0m[0m region    = "europe-west2"
      [32m+[0m[0m self_link = (known after apply)
      [32m+[0m[0m size      = (known after apply)
    }

[1m  # module.mig_eu.google_compute_region_autoscaler.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_region_autoscaler" "default" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "interstellar-autoscaler-eu"
      [32m+[0m[0m project            = "mando-host-project"
      [32m+[0m[0m region             = "europe-west2"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m target             = (known after apply)

      [32m+[0m[0m autoscaling_policy {
          [32m+[0m[0m cooldown_period = 60
          [32m+[0m[0m max_replicas    = 5
          [32m+[0m[0m min_replicas    = 2
          [32m+[0m[0m mode            = "ON"

          [32m+[0m[0m cpu_utilization {
              [32m+[0m[0m predictive_method = "STANDARD_AUTOSCALING"
              [32m+[0m[0m target            = 0.8
            }
        }
    }

[1m  # module.mig_eu.google_compute_region_instance_group_manager.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_region_instance_group_manager" "default" {
      [32m+[0m[0m base_instance_name               = "interstellar-eu"
      [32m+[0m[0m creation_timestamp               = (known after apply)
      [32m+[0m[0m distribution_policy_target_shape = (known after apply)
      [32m+[0m[0m distribution_policy_zones        = (known after apply)
      [32m+[0m[0m fingerprint                      = (known after apply)
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m instance_group                   = (known after apply)
      [32m+[0m[0m instance_group_manager_id        = (known after apply)
      [32m+[0m[0m list_managed_instances_results   = "PAGELESS"
      [32m+[0m[0m name                             = "interstellar-mig-eu"
      [32m+[0m[0m project                          = "mando-host-project"
      [32m+[0m[0m region                           = "europe-west2"
      [32m+[0m[0m self_link                        = (known after apply)
      [32m+[0m[0m status                           = (known after apply)
      [32m+[0m[0m target_size                      = 2
      [32m+[0m[0m wait_for_instances               = false
      [32m+[0m[0m wait_for_instances_status        = "STABLE"

      [32m+[0m[0m auto_healing_policies {
          [32m+[0m[0m health_check      = (known after apply)
          [32m+[0m[0m initial_delay_sec = 60
        }

      [32m+[0m[0m named_port {
          [32m+[0m[0m name = "http"
          [32m+[0m[0m port = 80
        }

      [32m+[0m[0m update_policy {
          [32m+[0m[0m max_surge_fixed       = 3
          [32m+[0m[0m max_unavailable_fixed = 3
          [32m+[0m[0m minimal_action        = "REFRESH"
          [32m+[0m[0m type                  = "PROACTIVE"
        }

      [32m+[0m[0m version {
          [32m+[0m[0m instance_template = (known after apply)
        }
    }

[1m  # module.storage_bucket.google_storage_bucket.default[0m will be created
[0m  [32m+[0m[0m resource "google_storage_bucket" "default" {
      [32m+[0m[0m effective_labels            = {
          [32m+[0m[0m "goog-terraform-provisioned" = "true"
        }
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m location                    = "US"
      [32m+[0m[0m name                        = "millers-planet"
      [32m+[0m[0m project                     = "mando-host-project"
      [32m+[0m[0m project_number              = (known after apply)
      [32m+[0m[0m public_access_prevention    = (known after apply)
      [32m+[0m[0m rpo                         = (known after apply)
      [32m+[0m[0m self_link                   = (known after apply)
      [32m+[0m[0m storage_class               = "STANDARD"
      [32m+[0m[0m terraform_labels            = {
          [32m+[0m[0m "goog-terraform-provisioned" = "true"
        }
      [32m+[0m[0m uniform_bucket_level_access = (known after apply)
      [32m+[0m[0m url                         = (known after apply)
    }

[1m  # module.storage_bucket.google_storage_bucket_object.default["index.html"][0m will be created
[0m  [32m+[0m[0m resource "google_storage_bucket_object" "default" {
      [32m+[0m[0m bucket         = "millers-planet"
      [32m+[0m[0m content        = (sensitive value)
      [32m+[0m[0m content_type   = (known after apply)
      [32m+[0m[0m crc32c         = (known after apply)
      [32m+[0m[0m detect_md5hash = "different hash"
      [32m+[0m[0m generation     = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m kms_key_name   = (known after apply)
      [32m+[0m[0m md5hash        = (known after apply)
      [32m+[0m[0m media_link     = (known after apply)
      [32m+[0m[0m name           = "index.html"
      [32m+[0m[0m output_name    = (known after apply)
      [32m+[0m[0m self_link      = (known after apply)
      [32m+[0m[0m source         = "files/index.html"
      [32m+[0m[0m storage_class  = (known after apply)
    }

[1m  # module.storage_bucket.google_storage_bucket_object.default["main.css"][0m will be created
[0m  [32m+[0m[0m resource "google_storage_bucket_object" "default" {
      [32m+[0m[0m bucket         = "millers-planet"
      [32m+[0m[0m content        = (sensitive value)
      [32m+[0m[0m content_type   = (known after apply)
      [32m+[0m[0m crc32c         = (known after apply)
      [32m+[0m[0m detect_md5hash = "different hash"
      [32m+[0m[0m generation     = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m kms_key_name   = (known after apply)
      [32m+[0m[0m md5hash        = (known after apply)
      [32m+[0m[0m media_link     = (known after apply)
      [32m+[0m[0m name           = "main.css"
      [32m+[0m[0m output_name    = (known after apply)
      [32m+[0m[0m self_link      = (known after apply)
      [32m+[0m[0m source         = "files/main.css"
      [32m+[0m[0m storage_class  = (known after apply)
    }

[1mPlan:[0m 25 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m backend_service_id         = (known after apply)
  [32m+[0m[0m forwarding_rule_ip_address = (known after apply)
  [32m+[0m[0m health_check_id            = (known after apply)
  [32m+[0m[0m instance_group_id          = (known after apply)
  [32m+[0m[0m instance_template_id       = (known after apply)
  [32m+[0m[0m url_map_id                 = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
Releasing state lock. This may take a few moments...
